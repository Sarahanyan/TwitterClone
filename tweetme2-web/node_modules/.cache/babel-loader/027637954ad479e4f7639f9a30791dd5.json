{"ast":null,"code":"function getCookie(name) {\n  var cookieValue = null;\n\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n\n  return cookieValue;\n}\n\nexport function lookup(method, endpoint, callback, data) {\n  let jsonData = {};\n\n  if (data) {\n    jsonData = JSON.stringify(data);\n  }\n\n  console.log(\"data: \", data);\n  console.log(\"jsonData: \", jsonData);\n  var csrftoken = getCookie('csrftoken');\n  const xhr = new XMLHttpRequest();\n  const url = `http://localhost:8000/api${endpoint}`;\n  xhr.responseType = \"json\";\n  xhr.open(method, url);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n  if (csrftoken) {\n    xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n  }\n\n  xhr.onload = () => {\n    callback(xhr.response, xhr.status);\n  };\n\n  xhr.onerror = () => {\n    alert(\"Sorry, a serious error occured\");\n  };\n\n  xhr.send(jsonData);\n}\nexport function displayTweets(callback) {\n  lookup('GET', \"/tweets/\", callback);\n}\nexport function createTweet(callback, tweetValue) {\n  lookup('POST', \"/tweets/create/\", callback, {\n    content: tweetValue\n  });\n}","map":{"version":3,"sources":["/home/sarah/Dev/DjangoReact/tweetme2/tweetme2-web/src/lookup/components.js"],"names":["getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","lookup","method","endpoint","callback","data","jsonData","JSON","stringify","console","log","csrftoken","xhr","XMLHttpRequest","url","responseType","open","setRequestHeader","onload","response","status","onerror","alert","send","displayTweets","createTweet","tweetValue","content"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACT,MAAIC,WAAW,GAAG,IAAlB;;AACA,MAAIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;AAC3C,QAAIC,OAAO,GAAGF,QAAQ,CAACC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,UAAIH,MAAM,GAAGC,OAAO,CAACE,CAAD,CAAP,CAAWE,IAAX,EAAb,CADqC,CAErC;;AACA,UAAIL,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBT,IAAI,CAACO,MAAL,GAAc,CAAlC,MAA0CP,IAAI,GAAG,GAArD,EAA2D;AACvDC,QAAAA,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBT,IAAI,CAACO,MAAL,GAAc,CAA/B,CAAD,CAAhC;AACA;AACH;AACJ;AACJ;;AACD,SAAON,WAAP;AACH;;AAEb,OAAQ,SACRU,MADQ,CACDC,MADC,EACOC,QADP,EAENC,QAFM,EAEIC,IAFJ,EAEU;AACd,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAID,IAAJ,EAAS;AACPC,IAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACD;;AACDI,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,IAAtB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,QAA1B;AAEA,MAAIK,SAAS,GAAGtB,SAAS,CAAC,WAAD,CAAzB;AAEA,QAAMuB,GAAG,GAAG,IAAIC,cAAJ,EAAZ;AACA,QAAMC,GAAG,GAAI,4BAA2BX,QAAS,EAAjD;AAEAS,EAAAA,GAAG,CAACG,YAAJ,GAAmB,MAAnB;AAEAH,EAAAA,GAAG,CAACI,IAAJ,CAASd,MAAT,EAAiBY,GAAjB;AACAF,EAAAA,GAAG,CAACK,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;;AACA,MAAIN,SAAJ,EAAe;AACbC,IAAAA,GAAG,CAACK,gBAAJ,CAAqB,uBAArB,EAA8C,gBAA9C;AACAL,IAAAA,GAAG,CAACK,gBAAJ,CAAqB,kBAArB,EAAyC,gBAAzC;AACAL,IAAAA,GAAG,CAACK,gBAAJ,CAAqB,aAArB,EAAoCN,SAApC;AACD;;AAEDC,EAAAA,GAAG,CAACM,MAAJ,GAAa,MAAM;AACjBd,IAAAA,QAAQ,CAACQ,GAAG,CAACO,QAAL,EAAeP,GAAG,CAACQ,MAAnB,CAAR;AACD,GAFD;;AAIAR,EAAAA,GAAG,CAACS,OAAJ,GAAc,MAAM;AAChBC,IAAAA,KAAK,CAAC,gCAAD,CAAL;AACH,GAFD;;AAGAV,EAAAA,GAAG,CAACW,IAAJ,CAASjB,QAAT;AACH;AAED,OAAO,SAASkB,aAAT,CAAuBpB,QAAvB,EAAgC;AACrCH,EAAAA,MAAM,CAAC,KAAD,EAAQ,UAAR,EAAoBG,QAApB,CAAN;AACO;AAET,OAAO,SAASqB,WAAT,CAAqBrB,QAArB,EAA+BsB,UAA/B,EAA0C;AAC/CzB,EAAAA,MAAM,CAAC,MAAD,EAAS,iBAAT,EAA4BG,QAA5B,EAAsC;AAACuB,IAAAA,OAAO,EAAED;AAAV,GAAtC,CAAN;AACO","sourcesContent":["function getCookie(name) {\n                var cookieValue = null;\n                if (document.cookie && document.cookie !== '') {\n                    var cookies = document.cookie.split(';');\n                    for (var i = 0; i < cookies.length; i++) {\n                        var cookie = cookies[i].trim();\n                        // Does this cookie string begin with the name we want?\n                        if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                            break;\n                        }\n                    }\n                }\n                return cookieValue;\n            }\n\nexport  function \nlookup(method, endpoint, \n  callback, data) {\n    let jsonData = {}\n    if (data){\n      jsonData = JSON.stringify(data)\n    }\n    console.log(\"data: \", data);\n    console.log(\"jsonData: \", jsonData);\n\n    var csrftoken = getCookie('csrftoken');\n\n    const xhr = new XMLHttpRequest()\n    const url = `http://localhost:8000/api${endpoint}`\n\n    xhr.responseType = \"json\"\n    \n    xhr.open(method, url)\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n    if (csrftoken) {\n      xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n      xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    }\n    \n    xhr.onload = () => {\n      callback(xhr.response, xhr.status)\n    }\n\n    xhr.onerror = () => {\n        alert(\"Sorry, a serious error occured\");\n    }\n    xhr.send(jsonData)\n}\n\nexport function displayTweets(callback){\n  lookup('GET', \"/tweets/\", callback)   \n        }\n\nexport function createTweet(callback, tweetValue){\n  lookup('POST', \"/tweets/create/\", callback, {content: tweetValue})   \n        }"]},"metadata":{},"sourceType":"module"}