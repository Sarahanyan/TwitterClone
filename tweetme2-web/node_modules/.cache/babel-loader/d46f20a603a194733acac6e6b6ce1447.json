{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/sarah/Dev/DjangoReact/tweetme2/tweetme2-web/src/tweets/list.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { apiTweetsList } from \"./lookup\";\nexport function TweetsList(props) {\n  _s();\n\n  const [tweets, setTweets] = useState([]);\n  const createdTweet = props.createdTweet;\n  let retweetedTweet;\n  useEffect(() => {\n    setTweets([createdTweet, ...tweets]);\n  }, [createdTweet]);\n  useEffect(() => {\n    const setTweetsCallback = (response, status) => {\n      if (status === 200) {\n        setTweets(response);\n\n        if (!tweets) {\n          setTweets([{\n            id: 1,\n            content: \"hey\"\n          }, {\n            id: 2,\n            content: \"heysup\"\n          }, {\n            id: 3,\n            content: \"sup\"\n          }]);\n        }\n      }\n    };\n\n    apiTweetsList(props.username, setTweetsCallback);\n  }, []);\n\n  const didRetweet = actionTweet => {\n    retweetedTweet = actionTweet;\n    setTweets([retweetedTweet, ...tweets]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container align-center\",\n    children: tweets.map((singleTweet, index) => {\n      const {\n        id,\n        content,\n        likes\n      } = singleTweet;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Tweet, {\n          singleTweet: singleTweet,\n          handleDidRetweet: didRetweet\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)\n      }, `${index}-${id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n}\n\n_s(TweetsList, \"BGGem5id+NbAnlULpiAhSozfS68=\");\n\n_c = TweetsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetsList\");","map":{"version":3,"sources":["/home/sarah/Dev/DjangoReact/tweetme2/tweetme2-web/src/tweets/list.js"],"names":["React","useState","useEffect","apiTweetsList","TweetsList","props","tweets","setTweets","createdTweet","retweetedTweet","setTweetsCallback","response","status","id","content","username","didRetweet","actionTweet","map","singleTweet","index","likes"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,aAAR,QAA4B,UAA5B;AAEA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAChC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMO,YAAY,GAAGH,KAAK,CAACG,YAA3B;AACA,MAAIC,cAAJ;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,SAAS,CAAC,CAACC,YAAD,EAAe,GAAGF,MAAlB,CAAD,CAAT;AACD,GAFQ,EAEN,CAACE,YAAD,CAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,iBAAiB,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAC9C,UAAIA,MAAM,KAAK,GAAf,EAAmB;AACjBL,QAAAA,SAAS,CAACI,QAAD,CAAT;;AACA,YAAI,CAACL,MAAL,EAAa;AACXC,UAAAA,SAAS,CAAC,CAAC;AAACM,YAAAA,EAAE,EAAE,CAAL;AAAQC,YAAAA,OAAO,EAAE;AAAjB,WAAD,EAA0B;AAACD,YAAAA,EAAE,EAAE,CAAL;AAAQC,YAAAA,OAAO,EAAE;AAAjB,WAA1B,EAAsD;AAACD,YAAAA,EAAE,EAAE,CAAL;AAAQC,YAAAA,OAAO,EAAE;AAAjB,WAAtD,CAAD,CAAT;AACD;AAEF;AACF,KARD;;AASAX,IAAAA,aAAa,CAACE,KAAK,CAACU,QAAP,EAAiBL,iBAAjB,CAAb;AAED,GAZQ,EAYN,EAZM,CAAT;;AAcA,QAAMM,UAAU,GAAIC,WAAD,IAAiB;AAClCR,IAAAA,cAAc,GAAGQ,WAAjB;AACAV,IAAAA,SAAS,CAAC,CAACE,cAAD,EAAiB,GAAGH,MAApB,CAAD,CAAT;AACD,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA,cAEIA,MAAM,CAACY,GAAP,CAAW,CAACC,WAAD,EAAcC,KAAd,KAAuB;AAChC,YAAM;AAACP,QAAAA,EAAD;AAAKC,QAAAA,OAAL;AAAcO,QAAAA;AAAd,UAAuBF,WAA7B;AACA,0BACE;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,WAAW,EAAIA,WAAtB;AAAmC,UAAA,gBAAgB,EAAEH;AAArD;AAAA;AAAA;AAAA;AAAA;AADF,SAAW,GAAEI,KAAM,IAAGP,EAAG,EAAzB;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAPD;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAeD;;GA3CeT,U;;KAAAA,U","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport {apiTweetsList} from \"./lookup\"\n\nexport function TweetsList(props) {\n  const [tweets, setTweets] = useState([])\n  const createdTweet = props.createdTweet\n  let retweetedTweet\n  \n  useEffect(() => {\n    setTweets([createdTweet, ...tweets])\n  }, [createdTweet])\n\n  useEffect(() => {\n    const setTweetsCallback = (response, status) => {\n      if (status === 200){\n        setTweets(response)\n        if (!tweets) {\n          setTweets([{id: 1, content: \"hey\"}, {id: 2, content: \"heysup\"}, {id: 3, content: \"sup\"}])      \n        }\n        \n      }\n    }\n    apiTweetsList(props.username, setTweetsCallback)\n\n  }, [])\n  \n  const didRetweet = (actionTweet) => {\n    retweetedTweet = actionTweet\n    setTweets([retweetedTweet, ...tweets])\n  }\n\n  return (\n      <div className=\"container align-center\">\n          {\n          tweets.map((singleTweet, index) =>{\n            const {id, content, likes} = singleTweet\n            return(\n              <div key={`${index}-${id}`}>\n                <Tweet singleTweet = {singleTweet} handleDidRetweet={didRetweet}/>\n              </div>\n            )\n          })\n          }\n      </div>\n\n  );\n}"]},"metadata":{},"sourceType":"module"}